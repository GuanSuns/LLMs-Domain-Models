{
    "Open a container": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to open a container. For example, the robot can open a boot.",
        "iter_1": {
            "llm_output": "1. ?c - container: the container to open\n\nPreconditions:\n```\n(and\n    (container-closed ?c)\n)\n```\n\nEffects:\n```\n(and\n    (not (container-closed ?c))\n    (container-open ?c)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?c - container: the container to open\n\nPreconditions:\n```\n(and\n    (container-closed ?c)\n)\n```\n\nEffects:\n```\n(and\n    (not (container-closed ?c))\n    (container-open ?c)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Close a container": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to close a container. For example, the robot can close a boot.",
        "iter_1": {
            "llm_output": "1. ?c - container: the container to close\n\nPreconditions:\n```\n(and\n    (container-open ?c)\n)\n```\n\nEffects:\n```\n(and\n    (not (container-open ?c))\n    (container-closed ?c)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?c - container: the container to close\n\nPreconditions:\n```\n(and\n    (container-open ?c)\n)\n```\n\nEffects:\n```\n(and\n    (not (container-open ?c))\n    (container-closed ?c)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Fetch an object from a container": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to take an object from a container. For example, the robot can fetch jack from the boot or the robot can fetch wheel_1 from the boot.",
        "iter_1": {
            "llm_output": "1. ?x - small_object: the object to take from the container\n2. ?c - container: the container from which the object is to be taken\n\nPreconditions:\n```\n(and\n    (container-open ?c)\n    (object-in-container ?x ?c)\n)\n```\n\nEffects:\n```\n(and\n    (not (object-in-container ?x ?c))\n    (robot-holding ?x)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?x - small_object: the object to take from the container\n2. ?c - container: the container from which the object is to be taken\n\nPreconditions:\n```\n(and\n    (container-open ?c)\n    (object-in-container ?x ?c)\n)\n```\n\nEffects:\n```\n(and\n    (not (object-in-container ?x ?c))\n    (robot-holding ?x)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Put away an object into a container": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to put an object into a container. For example, the robot can put away jack into the boot or the robot can put away wheel_1 into the boot.",
        "iter_1": {
            "llm_output": "1. ?x - small_object: the object to put into the container\n2. ?c - container: the container to put the object into\n\nPreconditions:\n```\n(and\n    (robot-holding ?x)\n    (container-open ?c)\n)\n```\n\nEffects:\n```\n(and\n    (not (robot-holding ?x))\n    (object-in-container ?x ?c)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?x - small_object: the object to put into the container\n2. ?c - container: the container to put the object into\n\nPreconditions:\n```\n(and\n    (robot-holding ?x)\n    (container-open ?c)\n)\n```\n\nEffects:\n```\n(and\n    (not (robot-holding ?x))\n    (object-in-container ?x ?c)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Loosen a nut in a hub": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to loosen a nut in a hub. For example, the robot can loosen nut_1 in hub_1. To safely perform this action, the hub needs to be on the ground (i.e., not jacked-up). You may assume the nut remains on the hub after the robot loosens it.",
        "iter_1": {
            "llm_output": "1. ?n - nut: the nut to be loosened\n2. ?h - hub: the hub where the nut is located\n3. ?w - tool: the wrench to be used for loosening the nut\n\nPreconditions:\n```\n(and\n    (nut-on-hub ?n ?h)\n    (hub-on-ground ?h)\n    (nut-tight ?n ?h)\n    (robot-holding ?w)\n    (is-wrench ?w)\n)\n```\n\nEffects:\n```\n(and\n    (not (nut-tight ?n ?h))\n    (nut-loose ?n ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
            "error_type": "invalid_object_type",
            "feedback_msg": "There is an invalid object type `wrench` for the parameter ?w. Please revise the PDDL model to fix this error.\n\nParameters:"
        },
        "llm_output": "1. ?n - nut: the nut to be loosened\n2. ?h - hub: the hub where the nut is located\n3. ?w - tool: the wrench to be used for loosening the nut\n\nPreconditions:\n```\n(and\n    (nut-on-hub ?n ?h)\n    (hub-on-ground ?h)\n    (nut-tight ?n ?h)\n    (robot-holding ?w)\n    (is-wrench ?w)\n)\n```\n\nEffects:\n```\n(and\n    (not (nut-tight ?n ?h))\n    (nut-loose ?n ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "iter_2": {
            "llm_output": "1. ?n - nut: the nut to be loosened\n2. ?h - hub: the hub where the nut is located\n3. ?w - tool: the wrench to be used for loosening the nut\n\nPreconditions:\n```\n(and\n    (robot-holding ?w)\n    (nut-on-hub ?n ?h)\n    (hub-on-ground ?h)\n    (is-wrench ?w)\n)\n```\n\nEffects:\n```\n(and\n    (not (nut-tight ?n ?h))\n    (nut-loose ?n ?h)\n)\n```\n\nNew Predicates:\n1. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n2. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n3. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n4. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n5. (is-wrench ?w - tool): true if the tool ?w is a wrench"
        },
        "new_predicates": []
    },
    "Tighten a nut in a hub": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to tighten a nut in a hub. For example, the robot can tighten nut_1 in hub_1. To safely perform this action, the hub needs to be on the ground (i.e., not jacked-up).",
        "iter_1": {
            "llm_output": "1. ?n - nut: the nut to be tightened\n2. ?h - hub: the hub where the nut is to be tightened\n3. ?w - tool: the wrench to be used for tightening the nut\n\nPreconditions:\n```\n(and\n    (nut-loose ?n ?h)\n    (hub-on-ground ?h)\n    (robot-holding ?w)\n    (is-wrench ?w)\n)\n```\n\nEffects:\n```\n(and\n    (not (nut-loose ?n ?h))\n    (nut-tight ?n ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?n - nut: the nut to be tightened\n2. ?h - hub: the hub where the nut is to be tightened\n3. ?w - tool: the wrench to be used for tightening the nut\n\nPreconditions:\n```\n(and\n    (nut-loose ?n ?h)\n    (hub-on-ground ?h)\n    (robot-holding ?w)\n    (is-wrench ?w)\n)\n```\n\nEffects:\n```\n(and\n    (not (nut-loose ?n ?h))\n    (nut-tight ?n ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Jack up a hub": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to jack up a hub. For example, the robot can jack up hub_1.",
        "iter_1": {
            "llm_output": "1. ?h - hub: the hub to jack up\n2. ?j - tool: the jack to use for jacking up the hub\n\nPreconditions:\n```\n(and\n    (hub-on-ground ?h)\n    (is-jack ?j)\n    (robot-holding ?j)\n)\n```\n\nEffects:\n```\n(and\n    (not (hub-on-ground ?h))\n    (hub-jacked-up ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?h - hub: the hub to jack up\n2. ?j - tool: the jack to use for jacking up the hub\n\nPreconditions:\n```\n(and\n    (hub-on-ground ?h)\n    (is-jack ?j)\n    (robot-holding ?j)\n)\n```\n\nEffects:\n```\n(and\n    (not (hub-on-ground ?h))\n    (hub-jacked-up ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Jack down a hub": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to jack down a hub. For example, the robot can jack down hub_1.",
        "iter_1": {
            "llm_output": "1. ?h - hub: the hub to jack down\n2. ?j - tool: the jack to use for jacking down the hub\n\nPreconditions:\n```\n(and\n    (hub-jacked-up ?h)\n    (robot-holding ?j)\n    (is-jack ?j)\n    (hub-unfastened ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (hub-jacked-up ?h))\n    (hub-on-ground ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?h - hub: the hub to jack down\n2. ?j - tool: the jack to use for jacking down the hub\n\nPreconditions:\n```\n(and\n    (hub-jacked-up ?h)\n    (robot-holding ?j)\n    (is-jack ?j)\n    (hub-unfastened ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (hub-jacked-up ?h))\n    (hub-on-ground ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Unfasten a hub": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to unfasten a hub. To achieve this, the robot needs to first remove the nut on the hub and then unfasten the hub. For example, the robot can unfasten hub_1 that has nut_1. To safely perform this action, the hub needs to be jacked up. At the end of this action, the hub should be unfastened, and nut should be detached from the hub and held by the robot.",
        "iter_1": {
            "llm_output": "1. ?h - hub: the hub to unfasten\n2. ?n - nut: the nut on the hub\n3. ?w - tool: the wrench to use for unfastening the hub\n\nPreconditions:\n```\n(and\n    (nut-on-hub ?n ?h)\n    (nut-loose ?n ?h)\n    (hub-jacked-up ?h)\n    (is-wrench ?w)\n    (robot-holding ?w)\n)\n```\n\nEffects:\n```\n(and\n    (not (nut-on-hub ?n ?h))\n    (robot-holding ?n)\n    (hub-unfastened ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?h - hub: the hub to unfasten\n2. ?n - nut: the nut on the hub\n3. ?w - tool: the wrench to use for unfastening the hub\n\nPreconditions:\n```\n(and\n    (nut-on-hub ?n ?h)\n    (nut-loose ?n ?h)\n    (hub-jacked-up ?h)\n    (is-wrench ?w)\n    (robot-holding ?w)\n)\n```\n\nEffects:\n```\n(and\n    (not (nut-on-hub ?n ?h))\n    (robot-holding ?n)\n    (hub-unfastened ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Fasten a hub": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to fasten a hub. To achieve this, the robot needs to first put a nut on the hub and then fasten the hub. For example, the robot can fasten hub_1 that has nut_1. Note that although the robot needs to install a nut into the hub, but the robot is not required to tighten the nut in this action. To safely perform this action, the hub needs to be jacked up.",
        "iter_1": {
            "llm_output": "1. ?h - hub: the hub to fasten\n2. ?n - nut: the nut to put on the hub\n\nPreconditions:\n```\n(and\n    (hub-jacked-up ?h)\n    (robot-holding ?n)\n    (nut-loose ?n ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (robot-holding ?n))\n    (nut-on-hub ?n ?h)\n    (hub-unfastened ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?h - hub: the hub to fasten\n2. ?n - nut: the nut to put on the hub\n\nPreconditions:\n```\n(and\n    (hub-jacked-up ?h)\n    (robot-holding ?n)\n    (nut-loose ?n ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (robot-holding ?n))\n    (nut-on-hub ?n ?h)\n    (hub-unfastened ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Remove wheel from hub": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to remove a wheel from a hub. For example, the robot can remove wheel_1 from hub_1. Note that the hub needs to be unfastened in order to remove the wheel. To safely perform this action, the hub needs to be jacked up.",
        "iter_1": {
            "llm_output": "1. ?w - wheel: the wheel to remove\n2. ?h - hub: the hub from which the wheel is to be removed\n\nPreconditions:\n```\n(and\n    (wheel-on-hub ?w ?h)\n    (hub-jacked-up ?h)\n    (hub-unfastened ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (wheel-on-hub ?w ?h))\n    (robot-holding ?w)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?w - wheel: the wheel to remove\n2. ?h - hub: the hub from which the wheel is to be removed\n\nPreconditions:\n```\n(and\n    (wheel-on-hub ?w ?h)\n    (hub-jacked-up ?h)\n    (hub-unfastened ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (wheel-on-hub ?w ?h))\n    (robot-holding ?w)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Put wheel on hub": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to put a wheel on an unfastened hub. For example, the robot can put wheel_1 on hub_1. Note that the hub needs to be unfastened in order to put on the wheel. To safely perform this action, the hub needs to be jacked up.",
        "iter_1": {
            "llm_output": "1. ?w - wheel: the wheel to put on the hub\n2. ?h - hub: the hub to put the wheel on\n\nPreconditions:\n```\n(and\n    (robot-holding ?w)\n    (is-wheel ?w)\n    (hub-unfastened ?h)\n    (hub-jacked-up ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (robot-holding ?w))\n    (wheel-on-hub ?w ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?w - wheel: the wheel to put on the hub\n2. ?h - hub: the hub to put the wheel on\n\nPreconditions:\n```\n(and\n    (robot-holding ?w)\n    (is-wheel ?w)\n    (hub-unfastened ?h)\n    (hub-jacked-up ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (robot-holding ?w))\n    (wheel-on-hub ?w ?h)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Inflate wheel": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (container-closed ?c - container): true if the container ?c is closed\n2. (container-open ?c - container): true if the container ?c is open\n3. (object-in-container ?x - small_object ?c - container): true if the object ?x is inside the container ?c\n4. (robot-holding ?x - small_object): true if the robot is holding the object ?x\n5. (nut-on-hub ?n - nut ?h - hub): true if the nut ?n is on the hub ?h\n6. (hub-on-ground ?h - hub): true if the hub ?h is on the ground (not jacked-up)\n7. (nut-tight ?n - nut ?h - hub): true if the nut ?n is tight on the hub ?h\n8. (nut-loose ?n - nut ?h - hub): true if the nut ?n is loose on the hub ?h\n9. (is-wrench ?w - tool): true if the tool ?w is a wrench\n10. (is-jack ?j - tool): true if the tool ?j is a jack\n11. (hub-jacked-up ?h - hub): true if the hub ?h is jacked up (not on the ground)\n12. (hub-unfastened ?h - hub): true if the hub ?h is unfastened\n13. (wheel-on-hub ?w - wheel ?h - hub): true if the wheel ?w is on the hub ?h\n14. (is-pump ?p - tool): true if the tool ?p is a pump\n15. (is-wheel ?w - wheel): true if the object ?w is a wheel\n16. (wheel-intact ?w - wheel): true if the wheel ?w is intact\n17. (wheel-deflated ?w - wheel): true if the wheel ?w is deflated\n18. (wheel-inflated ?w - wheel): true if the wheel ?w is inflated",
        "action_desc": "This action enables the robot to inflate a wheel. For example, the robot can inflate wheel_1. You also need to make sure the wheel is intact.",
        "iter_1": {
            "llm_output": "1. ?w - wheel: the wheel to inflate\n2. ?p - tool: the pump to use for inflating the wheel\n\nPreconditions:\n```\n(and\n    (is-wheel ?w)\n    (wheel-intact ?w)\n    (wheel-deflated ?w)\n    (is-pump ?p)\n    (robot-holding ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (wheel-deflated ?w))\n    (wheel-inflated ?w)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?w - wheel: the wheel to inflate\n2. ?p - tool: the pump to use for inflating the wheel\n\nPreconditions:\n```\n(and\n    (is-wheel ?w)\n    (wheel-intact ?w)\n    (wheel-deflated ?w)\n    (is-pump ?p)\n    (robot-holding ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (wheel-deflated ?w))\n    (wheel-inflated ?w)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    }
}