{
    "Load a package into a truck": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\nNo predicate has been defined yet",
        "action_desc": "This action enables the agent to load a package into a truck. For example, load a package_1 into a truck_1.",
        "iter_1": {
            "llm_output": "1. ?p - package: the package to be loaded\n2. ?t - truck: the truck to load the package into\n3. ?l - location: the location where the package and truck are present\n\nPreconditions:\n```\n(and\n    (package-at ?p ?l)\n    (truck-at ?t ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (package-at ?p ?l))\n    (package-in-truck ?p ?t)\n)\n```\n\nNew Predicates:\n1. (package-at ?p - package ?l - location): true if the package ?p is at the location ?l\n2. (truck-at ?t - truck ?l - location): true if the truck ?t is at the location ?l\n3. (package-in-truck ?p - package ?t - truck): true if the package ?p is in the truck ?t"
        },
        "llm_output": "1. ?p - package: the package to be loaded\n2. ?t - truck: the truck to load the package into\n3. ?l - location: the location where the package and truck are present\n\nPreconditions:\n```\n(and\n    (package-at ?p ?l)\n    (truck-at ?t ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (package-at ?p ?l))\n    (package-in-truck ?p ?t)\n)\n```\n\nNew Predicates:\n1. (package-at ?p - package ?l - location): true if the package ?p is at the location ?l\n2. (truck-at ?t - truck ?l - location): true if the truck ?t is at the location ?l\n3. (package-in-truck ?p - package ?t - truck): true if the package ?p is in the truck ?t",
        "new_predicates": [
            "(package-at ?p - package ?l - location): true if the package ?p is at the location ?l",
            "(truck-at ?t - truck ?l - location): true if the truck ?t is at the location ?l",
            "(package-in-truck ?p - package ?t - truck): true if the package ?p is in the truck ?t"
        ]
    },
    "Unload a package from a truck": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (package-at ?p - package ?l - location): true if the package ?p is at the location ?l\n2. (truck-at ?t - truck ?l - location): true if the truck ?t is at the location ?l\n3. (package-in-truck ?p - package ?t - truck): true if the package ?p is in the truck ?t",
        "action_desc": "This action enables the agent to unload a package from a truck. For example, unload a package_1 from a truck_1.",
        "iter_1": {
            "llm_output": "1. ?p - package: the package to unload\n2. ?t - truck: the truck from which the package will be unloaded\n3. ?l - location: the location where the package will be unloaded\n\nPreconditions:\n```\n(and\n    (package-in-truck ?p ?t)\n    (truck-at ?t ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (package-in-truck ?p ?t))\n    (package-at ?p ?l)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?p - package: the package to unload\n2. ?t - truck: the truck from which the package will be unloaded\n3. ?l - location: the location where the package will be unloaded\n\nPreconditions:\n```\n(and\n    (package-in-truck ?p ?t)\n    (truck-at ?t ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (package-in-truck ?p ?t))\n    (package-at ?p ?l)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Load a package into an airplane": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (package-at ?p - package ?l - location): true if the package ?p is at the location ?l\n2. (truck-at ?t - truck ?l - location): true if the truck ?t is at the location ?l\n3. (package-in-truck ?p - package ?t - truck): true if the package ?p is in the truck ?t",
        "action_desc": "This action enables the agent to load a package into an airplane. For example, load a package_1 into an airplane_1.",
        "iter_1": {
            "llm_output": "1. ?p - package: the package to load into the airplane\n2. ?a - plane: the airplane to load the package into\n3. ?l - location: the location where the airplane and package are present\n\nPreconditions:\n```\n(and\n    (package-at ?p ?l)\n    (plane-at ?a ?l)\n    (location-is-airport ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (package-at ?p ?l))\n    (package-in-plane ?p ?a)\n)\n```\n\nNew Predicates:\n1. (plane-at ?a - plane ?l - location): true if the airplane ?a is at the location ?l\n2. (location-is-airport ?l - location): true if the location ?l is an airport\n3. (package-in-plane ?p - package ?a - plane): true if the package ?p is in the airplane ?a"
        },
        "llm_output": "1. ?p - package: the package to load into the airplane\n2. ?a - plane: the airplane to load the package into\n3. ?l - location: the location where the airplane and package are present\n\nPreconditions:\n```\n(and\n    (package-at ?p ?l)\n    (plane-at ?a ?l)\n    (location-is-airport ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (package-at ?p ?l))\n    (package-in-plane ?p ?a)\n)\n```\n\nNew Predicates:\n1. (plane-at ?a - plane ?l - location): true if the airplane ?a is at the location ?l\n2. (location-is-airport ?l - location): true if the location ?l is an airport\n3. (package-in-plane ?p - package ?a - plane): true if the package ?p is in the airplane ?a",
        "new_predicates": [
            "(plane-at ?a - plane ?l - location): true if the airplane ?a is at the location ?l",
            "(location-is-airport ?l - location): true if the location ?l is an airport",
            "(package-in-plane ?p - package ?a - plane): true if the package ?p is in the airplane ?a"
        ]
    },
    "Unload a package from an airplane": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (package-at ?p - package ?l - location): true if the package ?p is at the location ?l\n2. (truck-at ?t - truck ?l - location): true if the truck ?t is at the location ?l\n3. (package-in-truck ?p - package ?t - truck): true if the package ?p is in the truck ?t\n4. (plane-at ?a - plane ?l - location): true if the airplane ?a is at the location ?l\n5. (location-is-airport ?l - location): true if the location ?l is an airport\n6. (package-in-plane ?p - package ?a - plane): true if the package ?p is in the airplane ?a",
        "action_desc": "This action enables the agent to unload a package from an airplane. For example, unload a package_1 from an airplane_1.",
        "iter_1": {
            "llm_output": "1. ?p - package: the package to unload\n2. ?a - plane: the airplane from which the package will be unloaded\n3. ?l - location: the location where the airplane is and the package will be unloaded\n\nPreconditions:\n```\n(and\n    (package-in-plane ?p ?a)\n    (plane-at ?a ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (package-in-plane ?p ?a))\n    (package-at ?p ?l)\n)\n```\n\nNew Predicates:\nNo newly defined predicate"
        },
        "llm_output": "1. ?p - package: the package to unload\n2. ?a - plane: the airplane from which the package will be unloaded\n3. ?l - location: the location where the airplane is and the package will be unloaded\n\nPreconditions:\n```\n(and\n    (package-in-plane ?p ?a)\n    (plane-at ?a ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (package-in-plane ?p ?a))\n    (package-at ?p ?l)\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
        "new_predicates": []
    },
    "Drive a truck from one location to another in a city": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (package-at ?p - package ?l - location): true if the package ?p is at the location ?l\n2. (truck-at ?t - truck ?l - location): true if the truck ?t is at the location ?l\n3. (package-in-truck ?p - package ?t - truck): true if the package ?p is in the truck ?t\n4. (plane-at ?a - plane ?l - location): true if the airplane ?a is at the location ?l\n5. (location-is-airport ?l - location): true if the location ?l is an airport\n6. (package-in-plane ?p - package ?a - plane): true if the package ?p is in the airplane ?a",
        "action_desc": "This action enables the agent to drive a truck from one location to another in a city. For example, drive a truck_1 from location_1 to location_2 in city_1.",
        "iter_1": {
            "llm_output": "1. ?t - truck: the truck to drive\n2. ?from - location: the location where the truck is currently\n3. ?to - location: the location where the truck will be driven to\n4. ?c - city: the city where the truck is driving\n\nPreconditions:\n```\n(and\n    (truck-at ?t ?from)\n    (location-in-city ?from ?c)\n    (location-in-city ?to ?c)\n    (not (= ?from ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (truck-at ?t ?from))\n    (truck-at ?t ?to)\n    (forall (?p - package)\n        (when (package-in-truck ?p ?t)\n            (and\n                (not (package-at ?p ?from))\n                (package-at ?p ?to)\n            )\n        )\n    )\n)\n```\n\nNew Predicates:\n1. (location-in-city ?l - location ?c - city): true if the location ?l is in the city ?c",
            "error_type": "has_unsupported_keywords",
            "feedback_msg": "The precondition or effect contain the keyword `forall` that is not supported in a standard STRIPS style model. Please express the same logic in a simplified way. You can come up with new predicates if needed (but note that you should use existing predicates as much as possible).\n\nParameters:"
        },
        "llm_output": "1. ?t - truck: the truck to drive\n2. ?from - location: the location where the truck is currently\n3. ?to - location: the location where the truck will be driven to\n4. ?c - city: the city where the truck is driving\n\nPreconditions:\n```\n(and\n    (truck-at ?t ?from)\n    (location-in-city ?from ?c)\n    (location-in-city ?to ?c)\n    (not (= ?from ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (truck-at ?t ?from))\n    (truck-at ?t ?to)\n    (move-all-packages ?t ?from ?to)\n)\n```\n\nNew Predicates:\n1. (location-in-city ?l - location ?c - city): true if the location ?l is in the city ?c\n2. (move-all-packages ?t - truck ?from - location ?to - location): true if all packages in the truck ?t are moved from location ?from to location ?to",
        "iter_2": {
            "llm_output": "1. ?t - truck: the truck to drive\n2. ?from - location: the location where the truck is currently\n3. ?to - location: the location where the truck will be driven to\n4. ?c - city: the city where the truck is driving\n\nPreconditions:\n```\n(and\n    (truck-at ?t ?from)\n    (location-in-city ?from ?c)\n    (location-in-city ?to ?c)\n    (not (= ?from ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (truck-at ?t ?from))\n    (truck-at ?t ?to)\n    (move-all-packages ?t ?from ?to)\n)\n```\n\nNew Predicates:\n1. (location-in-city ?l - location ?c - city): true if the location ?l is in the city ?c\n2. (move-all-packages ?t - truck ?from - location ?to - location): true if all packages in the truck ?t are moved from location ?from to location ?to"
        },
        "new_predicates": [
            "(location-in-city ?l - location ?c - city): true if the location ?l is in the city ?c",
            "(move-all-packages ?t - truck ?from - location ?to - location): true if all packages in the truck ?t are moved from location ?from to location ?to"
        ]
    },
    "Fly an airplane from one city to another": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (package-at ?p - package ?l - location): true if the package ?p is at the location ?l\n2. (truck-at ?t - truck ?l - location): true if the truck ?t is at the location ?l\n3. (package-in-truck ?p - package ?t - truck): true if the package ?p is in the truck ?t\n4. (plane-at ?a - plane ?l - location): true if the airplane ?a is at the location ?l\n5. (location-is-airport ?l - location): true if the location ?l is an airport\n6. (package-in-plane ?p - package ?a - plane): true if the package ?p is in the airplane ?a\n7. (location-in-city ?l - location ?c - city): true if the location ?l is in the city ?c\n8. (move-all-packages ?t - truck ?from - location ?to - location): true if all packages in the truck ?t are moved from location ?from to location ?to",
        "action_desc": "This action enables the agent to fly an airplane from one city's airport to another. The airports are locations in the city. For example, fly an airplane_1 from location_0 to location_1.",
        "iter_1": {
            "llm_output": "1. ?a - plane: the airplane to fly\n2. ?from - location: the departure location (airport) in the city\n3. ?to - location: the destination location (airport) in the city\n4. ?c1 - city: the departure city\n5. ?c2 - city: the destination city\n\nPreconditions:\n```\n(and\n    (plane-at ?a ?from)\n    (location-is-airport ?from)\n    (location-is-airport ?to)\n    (location-in-city ?from ?c1)\n    (location-in-city ?to ?c2)\n    (not (= ?c1 ?c2))\n)\n```\n\nEffects:\n```\n(and\n    (not (plane-at ?a ?from))\n    (plane-at ?a ?to)\n    (forall (?p - package)\n        (when (package-in-plane ?p ?a)\n            (and\n                (not (package-at ?p ?from))\n                (package-at ?p ?to)\n            )\n        )\n    )\n)\n```\n\nNew Predicates:\nNo newly defined predicate",
            "error_type": "has_unsupported_keywords",
            "feedback_msg": "The precondition or effect contain the keyword `forall` that is not supported in a standard STRIPS style model. Please express the same logic in a simplified way. You can come up with new predicates if needed (but note that you should use existing predicates as much as possible).\n\nParameters:"
        },
        "llm_output": "1. ?a - plane: the airplane to fly\n2. ?from - location: the departure location (airport) in the city\n3. ?to - location: the destination location (airport) in the city\n4. ?c1 - city: the departure city\n5. ?c2 - city: the destination city\n\nPreconditions:\n```\n(and\n    (plane-at ?a ?from)\n    (location-is-airport ?from)\n    (location-is-airport ?to)\n    (location-in-city ?from ?c1)\n    (location-in-city ?to ?c2)\n    (not (= ?c1 ?c2))\n)\n```\n\nEffects:\n```\n(and\n    (not (plane-at ?a ?from))\n    (plane-at ?a ?to)\n    (move-all-packages-in-plane ?a ?from ?to)\n)\n```\n\nNew Predicates:\n1. (move-all-packages-in-plane ?a - plane ?from - location ?to - location): true if all packages in the airplane ?a are moved from location ?from to location ?to",
        "iter_2": {
            "llm_output": "1. ?a - plane: the airplane to fly\n2. ?from - location: the departure location (airport) in the city\n3. ?to - location: the destination location (airport) in the city\n4. ?c1 - city: the departure city\n5. ?c2 - city: the destination city\n\nPreconditions:\n```\n(and\n    (plane-at ?a ?from)\n    (location-is-airport ?from)\n    (location-is-airport ?to)\n    (location-in-city ?from ?c1)\n    (location-in-city ?to ?c2)\n    (not (= ?c1 ?c2))\n)\n```\n\nEffects:\n```\n(and\n    (not (plane-at ?a ?from))\n    (plane-at ?a ?to)\n    (move-all-packages-in-plane ?a ?from ?to)\n)\n```\n\nNew Predicates:\n1. (move-all-packages-in-plane ?a - plane ?from - location ?to - location): true if all packages in the airplane ?a are moved from location ?from to location ?to"
        },
        "new_predicates": [
            "(move-all-packages-in-plane ?a - plane ?from - location ?to - location): true if all packages in the airplane ?a are moved from location ?from to location ?to"
        ]
    }
}